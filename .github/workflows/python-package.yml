# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ main ]

  pull_request:
    branches: [ main, release/* ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        python -m pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
     - name: Build env
      run: |
        touch .env
        echo ORIGINS=${{ secrets.origins }} >> .env
        echo SECRET_KEY=${{ secrets.secret_key }} >> .env
        echo ALGORITHM=${{ secrets.algorithm }} >> .env
        echo ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.access_token_expire_minutes }} >> .env
        echo ENDPOINT=${{ secrets.endpoint }} >> .env
        echo KEY=${{ secrets.key }} >> .env
        echo DATABASE_ID=${{ secrets.database_id }} >> .env
        echo USERS_CONTAINER_ID=${{ secrets.users_container_id }} >> .env
        echo ACCOUNTS_CONTAINER_ID=${{ secrets.accounts_container_id }} >> .env
        echo MAX_PAGE_SIZE=${{ secrets.max_page_size }} >> .env
        cat .env

    - name: Test with pytest
      run: |
        python -m pytest

    - name: Login via Azure CLI
      if: github.ref == 'refs/heads/main'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Login to Azure docker repository
      if: github.ref == 'refs/heads/main'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Build and push image
      if: github.ref == 'refs/heads/main'
      run: |
        docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/mfa-auth-api:${{ github.sha }}
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/mfa-auth-api:${{ github.sha }}

    - name: Deploy to Azure Container Instances
      if: github.ref == 'refs/heads/main'
      uses: 'azure/aci-deploy@v1'
      with:
        resource-group: ${{ secrets.RESOURCE_GROUP }}
        dns-name-label: ${{ secrets.RESOURCE_GROUP }}${{ github.run_number }}
        image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/mfa-banking-api:${{ github.sha }}
        registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        registry-username: ${{ secrets.REGISTRY_USERNAME }}
        registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        name: mfacontainers
        location: 'east us'

